clear allclose allcomputer = '3Tb_Sander';% Calibration luminance values taken by Sander Bosch and Ruben van Bergen on% December 12, 2011, room lights off, projector setting: image 2; % 2 neutral density filters% [255 255 255] = (343+364)/2 = 354, check: 35.9+299+14.9 = 349.8,	black = (0.64+0.63)/2% luminances measured using photometer (descending order, 1 run, 2 measures per level)lum1 = [		35.9  32.9 27.2 20.9 14.7 8.7 3.67 1.13 0.64;... %r                299 277 216 157 105 62.0 22.9 3.65 0.64;... %g                14.9 14.9 13.3 11.0 8.25 5.29 2.59 0.97 0.64]'; %blum2 = [		38.7 35.3 28.8 22.1 15.5 9.2 3.77 1.13 0.63;... %r                310 284 222 162 108 63.5 23.5 3.70 0.63;... %g                16.2 15.9 14.1 11.5 8.66 5.46 2.62 0.96 0.63]'; %blum = (flipud(lum1) + flipud(lum2))/2;voltage = kron([1 1 1], [0,32,64,96,128,160,192,224,255]'); 		% i.e. color number values, should be in ascending ordernormVolt = (voltage-voltage(1))/ (max(voltage(:)) - voltage(1));		% normalize to range 0 to 1maxLum = max(lum);dacsize = 8;% threshold = min(lum)/max(lum)figurecolor = 'rgb';for n = 1:3	normLum(:,n) = (lum(:,n) - min(lum(:,n))) / (max(lum(:,n)) - min(lum(:,n)));			% normalize to range 0 to 1		% calculate gamma using threshold starting normVolt (leads to better fits) (i.e. MonitorGammaError)    a = normVolt(:,n);    b = normLum(:,n);    params=fminsearch(@(x) MonitorGammaError(x,a,b) ,[.1 2]);% 	params=fminsearch('MonitorGammaError',[.1 2],[],[],normVolt(:,n), normLum(:,n));	threshold(n) = params(1);	gamma(n) = params(2);	fit(:,n) = MonitorGamma(normVolt(:,n),params(1),params(2));			% fit of specific voltages using gamma power function	gamTable(:,n) = MonitorGamma([0:255]'/255,params(1),params(2));		% table of fitted gamma values 	mse(n) = mean( (normLum(:,n) - fit(:,n)).^2);		plot(normVolt(:,n), normLum(:,n), [color(n) '*']);	hold on;	plot(normVolt(:,n), fit(:,n), [color(n) '-']);	hold on;		endgamInverse = mkInvGammaTable(gamTable,256*4);	% create inverse gamma table, note, 1st entry is 0 0 0, oversample gamma table												% very similar to InvertGammaTable.m in psychophysical toolbox except that [0 0 0]												% is first entry (rather than starting at much higher color number)% cd('Calibration')                                                dacsize = 8;												calibrationFile = ['calib_' date '.mat'];eval(['save ' calibrationFile ' lum voltage normLum normVolt gamma threshold gamTable gamInverse mse computer maxLum dacsize']);eval(['save calibrationNameFile calibrationFile']);% Function MonitorGamma uses gamma function y = x^g  where% x = input normVolt, y = normLuminance, % x0 = threshold normVolt before normLuminance starts to increase% fmins minimizes function MonitorGammaError (psychophysics toolbox) % which calculates mean squared error between % actual normLuminances as a function of normVolt and a gamma function specified in MonitorGamma% default starting values threshold = .1, gamma = 2% params(1) = threshold, params(2) = gamma		% calculate gamma using no threshold level for starting normVolt (leads to poorer fits) (i.e. MonitorGammaErrorFT)% params=fmins('MonitorGammaErrorFT',[.1 2],[],[],normVolt, normLum)% gamma = params(2)% fit = normVolt.^gamma% mse = mean( (normLum- fit).^2)% [fitvals] = FitGamma(255*normVolt',normLum',(0:255)','1');   % couldn't get this function to workfigure, plot(gamInverse)